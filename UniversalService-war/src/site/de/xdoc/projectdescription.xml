<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Projektbeschreibung</title>
		<author>Thomas</author>
	</properties>

	<body>
		<section name="Hintergrund des Projekts">
			<p>
				Hintergrund des UniversalService Projektes war es, mit verschiedenstens
				Technologien zu experimentieren
				und ein besseres Verständnis von gängigen Java Entwicklungs Richtlinien
				uns Tools aufzubauen. Die Entwicklung
				startete Anfang 2015 mit dem Ziel ein Webservice zu entwerfen, dass für
				verschiedenste Aufgaben genutzt werden
				kann. Diese angesprochenen Aufgaben waren Anfangs nicht wirklich klar,
				können aber wie folgt zusammengefaßt werden:
			</p>
			<ul>
				<li>Bereitstellen eines Services für Klienten basierend auf einem
					spezifizierten Interface (WSDL)</li>
				<li>Durchführen verschiedener Aufgaben mit erhaltenen Daten und
					Zurücksenden errechneter Ergebnisse</li>
				<li>Speichern der erhaltenen Daten in einer Backend Datenbank für
					Weiterverwendungszwecke</li>
				<li>Hosten des Webservices auf einem Gratis-Provider</li>
			</ul>
			
			<subsection name="Architektur">
			    <p>
			        Das Universalservice ist ein SOAP Webservice und kann von verschiedenen Applikationen 
			        genutzt werden. Das beinhaltet Web Applikationen, die in einem normalen Webbrowser laufen, 
			        Desktop Applikationen, aber auch andere Webservices, die die bereitgestellte Funktionalität 
			        des UniversalServices nutzen. Das Service selbst unterteilt sich in mehrere Komponenten, die 
			        alle eine bestimmte Funktion erfüllen.
			    </p>
			    <ul>
			        <li><b>Service Komponente: </b>Diese Komponente setzt sich aus dem Servlet, dass die HTTP Requests 
			            entgegennimmt, und dem Service selbst, dass sämtliche Methoden, die vom Client aufgerufen werden 
			            können, zur Verfügung stellt. Die Interface Beschreibung des Webservices existiert in Form einer 
			            WSDL Datei und wird im Kapitel <a href="interfacedescription.html">Interfacebeschreibung</a> 
			            näher erläutert.</li>
			        <li><b>Delegator Komponente: </b>Diese Komponente wird vom Service genutzt um konkrete Geschäftslogik 
			            auszuführen. Im Allgemeinen ist eine Delegator eine Komponente, die eine besondere Funktionalität 
			            erfüllt. So ist der Persistencedeligator beispielsweise dafür zuständig, Objekte in die Datenbank 
			            einzuspielen und auszulesen.</li>
			        <li><b>Persistence Unit Komponente: </b>DIe Persistence Unit Komponente wird von einem Delegator genutzt 
			            und führt die eigentlichend CRUD (Create, Read, Update und Delete) Operationen durch. Die Komponente 
			            besteht aus den Model Entities, die in die Datenbank geschrieben werden und aus den entsprechenden 
			            Data Access Objects (DAOs).</li>
			        <li><b>App Engine Data Store: </b>Da das Webservice mit Google App Engine gehostet wird, wird auch dessen 
			            mitgelieferte Datenbanktechnologie (App Engine Data Store) genutzt.</li>
			    </ul>
			    <!-- COMPONENT DIAGRAMM -->
			    <img alt="BookGrabber_Componentdiagramm" src="images/bookgrabber_componentd.png"
					width="100%" />
			</subsection>
		</section>
	</body>
</document>

