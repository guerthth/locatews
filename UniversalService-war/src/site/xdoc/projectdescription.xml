<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Projectdescription</title>
		<author>Thomas</author>
	</properties>

	<body>
		<section name="Background of the project">
			<p>
				The intention of the UniversalService project was to experiment with
				several techniques and
				build a better understanding of common Java coding conventions and tools.
				The development started
				in the beginning of 2015 with the goal of building a webservice that
				can be used for several tasks.
				Those tasks where not clear or known in the beginning, but in general
				they can be summarized as:

			</p>
			<ul>
				<li>enabling clients to call the service based on the specified
					interface</li>
				<li>performing operations with the with received data and return
					results</li>
				<li>persisting data in a backend database for further usage</li>
				<li>hosting the service on a free provider</li>
			</ul>
			<!--  
			<p>
				<img alt="BookGrabber_Classdiagramm" src="images/bookgrabber_cd.png"
					width="100%" />
			</p>
			-->
			
			<subsection name="Architecture Overview">
			    <p>
			        The webservice can be used from various applications. Examples are a web app running 
			        in a commom browser, a desktop application or another webservice that uses the provided 
			        functionality by the UniversalService. The service itself can be seperated in several 
			        components.
			    </p>
			    <ul>
			        <li><b>Service Component: </b>Consists of the servlet handling HTTP requests and the 
			            service itself, providing all web methods that can be called by the clients. The 
			            interface description of the service exists in form of the WSDL file and is described 
			            in the <a href="interfacedescription.html">Interfacedescription</a></li>
			        <li><b>Delegator Component: </b>This component is used by the service component to run the 
			            concrete business logic. In general, delegators are components that have a specific 
			            functionality. An example is the Persistencedeligator, which is responsible for storing 
			            and retrieving objects from the datastore.</li>
			        <li><b>Persistence Unit Component: </b>The persistence unit is used by delegators and performs 
			            the actual CRUD operations on the datastore. It consists of the model entities as well as 
			            the data access objects.</li>
			        <li><b>App Engine Data Store: </b>Since the webservice is hosted with Google App Engine, the 
			            storage technology used for persitence is the included App Engine Data Store.</li>
			    </ul>
			    <!-- COMPONENT DIAGRAMM -->
			    <img alt="BookGrabber_Componentdiagramm" src="images/bookgrabber_componentd.png"
					width="100%" />
			</subsection>
		</section>
	</body>
</document>

